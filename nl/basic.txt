== Basis Trucs ==

In plaats van in een zee van Git commando's te duiken, kun je deze basale voorbeelden
gebruiken om je voeten nat te maken. Ondanks dat ze eenvoudig zijn, zijn ze bruikbaar.
Gedurende mijn eerste maanden met Git ben ik nooit verder gegaan dan het materiaal in
dit hoofdstuk.

=== De Status Bewaren ===

Ga je iets drastisch proberen? Sla dan voor je begint een tussen versie op van alle
bestanden in de huidige map:

 $ git init
 $ git add .
 $ git commit -m "My first backup"

Als je aanpassingen mis gaan, kun je de originele versie herstellen:

 $ git reset --hard

Om de status opnieuw op te slaan:

 $ git commit -a -m "Another backup"

=== Toevoegen, Verwijderen, Hernoemen ===

Bovenstaande houdt alleen de bestanden bij die aanwezig waren toen je de eerste keer *git add* uitvoerde. Als je nieuwe bestanden of
submappen toevoegd, zul je dat Git moeten vertellen:

 $ git add readme.txt Documentation

Als je Git sommige bestanden wil laten vergeten zul je iets soortgelijks moeten doen:

 $ git rm kludge.h obsolete.c
 $ git rm -r incriminating/evidence/

Git verwijderd deze bestanden voor je, als je dat zelf al niet gedaan hebt.

Een bestand hernoemen is hetzelfde als de oude naam verwijderen en de nieuwe toevoegen. Er is ook een afkorting *git mv*, dat dezelfde
syntax als het *mv* commando heeft. Bijvoorbeeld:

 $ git mv bug.c feature.c

=== Geavanceerde Undo/Redo ===

Soms wil je alleen maar terug gaan naar een bepaald punt en alle wijzigingen erna vergeten, omdat ze allemaal fout zijn. Dan toont:

 $ git log

je een lijst van recente commits, met hun SHA1 hash:

----------------------------------
commit 766f9881690d240ba334153047649b8b8f11c664
Author: Bob <bob@example.com>
Date:   Tue Mar 14 01:59:26 2000 -0800

    Replace printf() with write().

commit 82f5ea346a2e651544956a8653c0f58dc151275c
Author: Alice <alice@example.com>
Date:   Thu Jan 1 00:00:00 1970 +0000

    Initial commit.
----------------------------------

De eerste paar karakters van de hash zijn voldoende om de commit te specificeren;
als alternatief kun je de hele hash copieren en plakken. Type:

 $ git reset --hard 766f

om de toestand naar de gegeven commit te herstellen en alle nieuwere commits permanent te verwijderen.

Soms wil je alleen even naar een oude toestand springen. In dat geval, type:

 $ git checkout 82f5

Hiermee ga je terug in de tijd, maar je bewaard de nieuwere commits. Maar, als je nu aanpassingen maakt en commit zul je, net als in een science-fiction film, in een andere realiteit zitten, want je acties zijn anders dan de eerste keer.

Deze andere realiteit wordt een 'branch' genoemd, en <<branch,we'll have more to say about this later>>. Onthoud voor nu dat

 $ git checkout master

je terug brengt naar het heden. Om Git op te laten houden met klagen moet je altijd je wijzigingen resetten of committen, alvorens een checkout te doen.

Maak de vergelijking met een computer spel nog eens:

- *`git reset --hard`*: laad een oude status en verwijder alle nieuwere statussen dan degene die je zojuist geladen hebt.

- *`git checkout`*: laad een oude status, maar als je nu verder speelt zal de status afwijken van de nieuwere statussen die je eerder gemaakt hebt. Als je nu nieuwe statussen bewaard zullen deze eindigen in een nieuwe branch, die de alternatieve realiteit weergeeft. <<branch,We deal with this later>>.

Je kunt er voor kiezen alleen bepaalde bestanden en submappen te herstellen door ze achter het commando te zetten:

 $ git checkout 82f5 some.file another.file

Pas op, want deze vorm van *checkout* kan zonder waarschuwing bestanden overschrijven. Om ongelukken te voorkomen kun je het best een commit
doen alvorens een checkout commando; in het bijzonder als je Git pas aan het leren bent. Als je in het algemeen onzeker bent over een
commando, Git commando of niet, kun je het beste eerst *git commit -a* uitvoeren.

Geen zin om hashes te knippen en plakken? Gebruik dan:

 $ git checkout :/"My first b"

om te springen naar de commit die met een gegeven boodschap begint.
Je kunt ook om de 5e laatste opgeslagen status vragen:

 $ git checkout master~5

=== Terugdraaien ===

Bij rechtspraak kunnen gebeurtenissen verwijderd worden uit de notulen. Op dezelfde manier kun je ook specifieke commits kiezen om ongedaan
te maken.

 $ git commit -a
 $ git revert 1b6d

zal alleen de commit met de gegeven hash ongedaan maken. Het terugdraaien wordt als een nieuwe commit vastgelegd, wat je kunt nagaan door
*git log* uit te voeren.

=== Changelog Generatie ===

Sommige projecten vereisen een http://en.wikipedia.org/wiki/Changelog[changelog].
Deze kun je generen door middel van:

 $ git log > ChangeLog

=== Bestanden Downloaden ===

Om een kopie te krijgen van een project dat met Git beheerd wordt:

 $ git clone git://server/path/to/files

Om bijvoorbeeld alle bestanden te krijgen, die ik gebruikt heb om deze site te maken:

 $ git clone git://git.or.cz/gitmagic.git

We zullen binnenkort veel te vertellen hebben over het *clone* commando.

=== De Bleeding Edge ===

Als je al een kopie van een project gedownload hebt met *git clone*, dan kun je het naar de laatste versie brengen met:

 $ git pull

=== Direct Publiceren ===

Stel dat je een script hebt geschreven, dat je wil delen met anderen. Je kunt ze vertellen dat ze het van je computer moeten downloaden, maar als ze dat doen terwijl je het script aan het verbeteren bent of experimentele wijzigingen aan het doen bent, dan kunnen ze in de problemen komen. Dit is uiteraard de reden dat er versies vrijgegeven worden. De ontwikkelaars zullen mogelijk vaak aan een project werken, maar ze maken de code alleen beschikbaar als ze het presenteerbaar vinden.

Om dit in Git te doen, in de map waarin je script zich bevindt:

 $ git init
 $ git add .
 $ git commit -m "First release"

Zeg vervolgens tegen je gebruikers dit uit te voeren:

 $ git clone your.computer:/path/to/script

om je script te downloaden. Dit gaat er vanuit dat ze ssh toegang hebben. Zo niet, draai dan *git daemon* en vertel je gebruikers dan in de
plaats dit uit te voeren:

 $ git clone git://your.computer/path/to/script

Voer vanaf nu, iedere keer als je script klaar is om vrijgegeven te worden, dit uit:

 $ git commit -a -m "Next release"

en je gebruikers kunnen hun versie van het script vernieuwen door naar de map te gaan waarin je script staat en het volgende in te typen:

 $ git pull

Je gebruikers zullen dan nooit eindigen met een versie van je script dat je ze niet wilde laten zien.

=== Wat heb ik gedaan? ===

Om uit te vinden welke wijzigingen je gedaan hebt sinds je laatste commit:

 $ git diff

Of sinds gisteren:

 $ git diff "@{yesterday}"

Of tussen een specifieke versie en twee versies geleden:

 $ git diff 1b6d "master~2"

In ieder geval is de uitvoer een patch, die kan toegepast worden met *git apply*.
Probeer ook:

 $ git whatchanged --since="2 weeks ago"

In plaats daarvan, blader ik vaak door de geschiedenis met http://sourceforge.net/projects/qgit[qgit], vanwege het gelikte fotogenieke interface, of met http://jonas.nitro.dk/tig/[tig], een tekst gebaseerde interface dat goed over trage verbindingen werkt. Als alternatief kun je een webserver installeren, *git instaweb* uitvoeren en iedere web browser starten.

=== Oefening ===

Laat A, B, C, D vier opvolgende commits zijn, waarbij B hetzelfde is als A behalve dat er wat bestanden zijn verwijderd. We willen de bestanden opnieuw toevoegen in D. Hoe kunnen we dat doen?

Er zijn minstens drie oplossingen. Gesteld dat we bij D zijn:

  1. Het verschil in A en B zijn de verwijderde bestanden. We kunnen een patch genereren, die dit verschil representeerd en die toepassen:

   $ git diff B A | git apply

  2. Omdat we de bestanden in A hebben opgeslagen, kunnen we ze ophalen:

   $ git checkout A foo.c bar.h

  3. We kunnen de wijziging van A naar B als een wijziging zien, die we ongedaan willen maken:

   $ git revert B

Welke optie is het beste? Degene die je het meest prefereert. Het is gemakkelijk om te krijgen wat je wilt met Git, en vaak zijn er meerdere manieren om iets voor elkaar te krijgen.
